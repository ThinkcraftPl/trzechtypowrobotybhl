
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <Bonezegei_DHT11.h>
#include <RtcDS1302.h>

//DHT11:
Bonezegei_DHT11 dht(5);
float temp;
int hum;


//RTC DS1302
ThreeWire myWire(9, 8, 10); // IO, SCLK, CE
RtcDS1302<ThreeWire> Rtc(myWire);
int hour;
int minute;

/* Uncomment the initialize the I2C address , uncomment only one, If you get a totally blank screen try the other*/
#define i2c_Address 0x3c //initialize with the I2C addr 0x3C Typically eBay OLED's
//#define i2c_Address 0x3d //initialize with the I2C addr 0x3D Typically Adafruit OLED's
//#define i2c_Address 0x78


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   //   QT-PY / XIAO
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000
};





void setup()   {
  Wire.begin(6, 7);
  Serial.begin(9600);
  dht.begin();



  delay(250); // wait for the OLED to power up
  display.begin(i2c_Address, true); // Address 0x3C default
  display.display();
  delay(2000);
  display.clearDisplay();

  //RTC

  Serial.print("compiled: ");
  Serial.print(__DATE__);
  Serial.println(__TIME__);
  Rtc.Begin();
  RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
  // printDateTime(compiled);
  Serial.println();



}

void RTC() {
  RtcDateTime now = Rtc.GetDateTime();
  // printDateTime(now);
}
void printDateTime(const RtcDateTime& dt)
{
  Serial.print(dt.Hour());
  Serial.print(":");
  Serial.println(dt.Minute());
  hour = dt.Hour();
  minute = dt.Minute();
}

void DHT11() {
  if (dht.getData()) {                         // get All data from DHT11
    temp = dht.getTemperature();      // return temperature in celsius
    //float tempFar = dht.getTemperature(true);  // return temperature in fahrenheit if true celsius of false
    hum = dht.getHumidity();               // return humidity
    String str  = "Temperature: ";
    str += temp;
    str += "Â°C  ";
    str += "Humidity:";
    str += hum;
    Serial.println(str.c_str());
  }
}

void disptest() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  display.println("Failure is always an option");
  display.setTextColor(SH110X_BLACK, SH110X_WHITE); // 'inverted' text
  display.println(3.141592);
  display.setTextSize(2);
  display.setTextColor(SH110X_WHITE);
  display.print("0x"); display.println(0xDEADBEEF, HEX);
  display.display();
  delay(2000);
  display.clearDisplay();
}

void disp1() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  display.print("Temp: ");
  display.printf("%.0fC
  \n",temp);
  display.print("Hum: ");
  display.println(hum);
  display.print("T: ");
  display.printf("%02d",hour);
   display.print(":");
  display.printf("%02d\n",minute);
  display.display();
  delay(2000);
  display.clearDisplay();
}




void loop() {
     RtcDateTime now = Rtc.GetDateTime();
  DHT11();
  RTC();
  printDateTime(now);
  disp1();

}
